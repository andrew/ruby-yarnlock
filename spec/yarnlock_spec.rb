# frozen_string_literal: true

RSpec.describe Yarnlock do
  let(:yarnlock) do
    <<~YARNLOCK
      # THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
      # yarn lockfile v1


      "@yarnpkg/lockfile@^1.0.0":
        version "1.0.0"
        resolved "https://registry.yarnpkg.com/@yarnpkg/lockfile/-/lockfile-1.0.0.tgz#33d1dbb659a23b81f87f048762b35a446172add3"
    YARNLOCK
  end
  let(:parsed) do
    entry = Yarnlock::Entry.new(
      version: '1.0.0',
      package: '@yarnpkg/lockfile',
      version_ranges: ['^1.0.0'],
      resolved: 'https://registry.yarnpkg.com/@yarnpkg/lockfile/-/lockfile-1.0.0.tgz#33d1dbb659a23b81f87f048762b35a446172add3'
    )
    [entry].extend(Yarnlock::Entry::Collection)
  end

  describe '.parse' do
    context 'when invalid text was passed' do
      it { expect { Yarnlock.parse 'Invalid' }.to raise_error(/\ACould not parse/) }
    end

    context 'when correct text was passed' do
      it 'parses correct string' do
        expect(Yarnlock.parse(yarnlock)).to eq parsed
      end

      context 'when disable return_collection option' do
        before { Yarnlock.config.return_collection = false }

        it 'returns pure hash value' do
          expect(Yarnlock.parse(yarnlock)).to eq(
            '@yarnpkg/lockfile@^1.0.0' => {
              'version' => '1.0.0',
              'resolved' => 'https://registry.yarnpkg.com/@yarnpkg/lockfile/-/lockfile-1.0.0.tgz#33d1dbb659a23b81f87f048762b35a446172add3'
            }
          )
        end
      end
    end
  end

  describe '.load' do
    let(:file_path) { File.expand_path('fixtures/yarn.lock', __dir__) }

    it 'can load actual file' do
      expect(Yarnlock.load(file_path)).to eq parsed
    end
  end

  describe '.stringify' do
    it 'stringifies correct string' do
      expect(Yarnlock.stringify(parsed)).to eq yarnlock
    end
  end
end
